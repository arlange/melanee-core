«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«AROUND attributes FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
 	// ITEMIS CHANGE: moved to SharedResourceSetInfoDelegate
 	//private long myModificationStamp = «IF null = editorGen.application»org.eclipse.core.resources.IResource.NULL_STAMP«ELSE»0«ENDIF»;

	«IF null = editorGen.application-»
		«EXPAND xpt::Common::generatedMemberComment»
	// ITEMIS CHANGE: moved to SharedResourceSetInfoDelegate
 	//private org.eclipse.emf.workspace.util.WorkspaceSynchronizer mySynchronizer;

		«EXPAND xpt::Common::generatedMemberComment»
	private java.util.Collection myUnSynchronizedResources = new java.util.ArrayList();
	
	«ENDIF-»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument myDocument;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.ui.IEditorInput myEditorInput;
		
	«EXPAND xpt::Common::generatedMemberComment»
	private boolean myUpdateCache = true;
	
	«EXPAND xpt::Common::generatedMemberComment»
	private boolean myModifiable = false;

	«EXPAND xpt::Common::generatedMemberComment»
	private boolean myReadOnly = true;
	
	«EXPAND xpt::Common::generatedMemberComment»
	private ResourceSetModificationListener myResourceSetListener;
	
	// ITEMIS CHANGE: shared resource set info is stored in this member
	«EXPAND xpt::Common::generatedMemberComment»
	private de.itemis.gmf.runtime.editingdomain.SharedResourceSetInfoDelegate sharedResourceSetInfoDelegate;

	// ITEMIS CHANGE: keep the SynchronizerDelegate in a memebr variable
	«EXPAND xpt::Common::generatedMemberComment»
	private SynchronizerDelegate synchronizerDelegate;
«ENDAROUND»

«AROUND _constructor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
// ITEMIS CHANGE: adapted order of initializations to new dependencies
public ResourceSetInfo(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document, org.eclipse.ui.IEditorInput editorInput) {
	super(document);
	myDocument = document;
	myEditorInput = editorInput;
	
	// ITEMIS CHANGE: register workspace synchronizer delegate
	synchronizerDelegate = new SynchronizerDelegate();
	sharedResourceSetInfoDelegate = SharedResourceSetInfoDelegate.adapt(getEditingDomain());
	sharedResourceSetInfoDelegate.addWorkspaceSynchronizerDelegate(synchronizerDelegate);

	// ITEMIS CHANGE: If one of the resources in the shared editing domain is dirty, we have to set the dirty flag 
	fCanBeSaved = sharedResourceSetInfoDelegate.resourceSetIsDirty(); 

	myResourceSetListener = new ResourceSetModificationListener(this);
	getResourceSet().eAdapters().add(myResourceSetListener);
	«IF null = editorGen.application-»
	startResourceListening();
	«ENDIF-»
}
«ENDAROUND»

«AROUND getModificationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public long getModificationStamp() {
	// ITEMIS CHANGE: delegate
	return sharedResourceSetInfoDelegate.getModificationStamp();
	//return myModificationStamp;
		
}
«ENDAROUND»

«AROUND setModificationStamp FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public void setModificationStamp(long modificationStamp) {
	// ITEMIS CHANGE: delegate
	sharedResourceSetInfoDelegate.setModificationStamp(modificationStamp);
	//myModificationStamp = modificationStamp;
}
«ENDAROUND»

«AROUND dispose FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public void dispose() {
	«IF null = editorGen.application-»
	//stopResourceListening();
	«ENDIF-»
	// ITEMIS CHANGE: deregister synchronizerDelegate 
	sharedResourceSetInfoDelegate
					.removeWorkspaceSynchronizerDelegate(synchronizerDelegate);
			
	getResourceSet().eAdapters().remove(myResourceSetListener);
	// ITEMIS CHANGE: Unload resources selectively, as they can still be used by other editors
	//for (java.util.Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/ it = getLoadedResourcesIterator(); it.hasNext();) {
	//	org.eclipse.emf.ecore.resource.Resource resource = (org.eclipse.emf.ecore.resource.Resource) it.next();
	//	resource.unload();
	//}
	de.itemis.gmf.runtime.editingdomain.ResourceUnloadingTool.unloadEditorInput(getResourceSet(), myEditorInput);
}
«ENDAROUND»

«AROUND stopResourceListening FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public final void stopResourceListening() {
	// ITEMIS CHANGE: delegate
	sharedResourceSetInfoDelegate.stopResourceListening();
	//mySynchronizer.dispose();
	//mySynchronizer = null;
}
«ENDAROUND»

«AROUND startResourceListening FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public final void startResourceListening() {
	// ITEMIS CHANGE: delegate
	sharedResourceSetInfoDelegate.startResourceListening();
	//mySynchronizer = new org.eclipse.emf.workspace.util.WorkspaceSynchronizer(getEditingDomain(), new SynchronizerDelegate());
}
«ENDAROUND»


