<?xml version="1.0" encoding="UTF-8"?>
<gmfmap:Mapping
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:gmfgraph="http://www.eclipse.org/gmf/2006/GraphicalDefinition"
    xmlns:gmfmap="http://www.eclipse.org/gmf/2008/mappings"
    xmlns:gmftool="http://www.eclipse.org/gmf/2005/ToolDefinition">
  <nodes>
    <containmentFeature
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Domain/deepModel"/>
    <ownedChild>
      <domainMetaElement
          href="../../org.melanee.core.models.plm/model/PLM.ecore#//DeepModel"/>
      <domainInitializer
          xsi:type="gmfmap:FeatureSeqInitializer">
        <initializers
            xsi:type="gmfmap:ReferenceNewElementSpec">
          <feature
              xsi:type="ecore:EReference"
              href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
          <newElementInitializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
              <value
                  body="self.getDefaultVisualizationValues()"/>
            </initializers>
          </newElementInitializers>
        </initializers>
      </domainInitializer>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping">
        <diagramLabel
            href="plm.gmfgraph#DeepModelFigureNameLabel"/>
        <features
            href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
      </labelMappings>
      <labelMappings
          xsi:type="gmfmap:ExpressionLabelMapping"
          readOnly="true">
        <diagramLabel
            href="plm.gmfgraph#DeepModelFigureComplianceWarningLabel"/>
        <viewExpression
            body="if(self.oclAsType(ecore::EObject).eContainer().oclAsType(Domain).complianceKind = ComplianceKind::MetaDepth) then&#xD;&#xA;&#x9;'Please keep in mind that the feature sets of Melanee and MetaDepth diverge.'&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
      </labelMappings>
      <labelMappings
          xsi:type="gmfmap:ExpressionLabelMapping"
          readOnly="true">
        <diagramLabel
            href="plm.gmfgraph#DeepModelFigureAVSLabel"/>
        <viewExpression
            body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;--**********************************&#xD;&#xA;--Check if attributes are rendered in tvs&#xD;&#xA;--**********************************&#xD;&#xA;let renderName:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'tvs'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the name&#xD;&#xA;--**********************************&#xD;&#xA;let name : String =&#xD;&#xA;&#x9;if (renderName) then&#xD;&#xA;&#x9;&#x9;'name='.concat(self.name).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;let output:String = &#xD;&#xA;&#x9;'{'.concat(name).concat('}')&#xD;&#xA;in&#xD;&#xA;--**********************************&#xD;&#xA;--Write the output&#xD;&#xA;--**********************************&#xD;&#xA;if (output &lt;> '{}') then&#xD;&#xA;&#x9;output&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
      </labelMappings>
      <visualEffects
          oclExpression="self.enumeration->size() > 0">
        <diagramPin
            xsi:type="gmfgraph:VisiblePin"
            href="plm.gmfgraph#EnumerationsVisiblePin"/>
      </visualEffects>
      <tool
          xsi:type="gmftool:CreationTool"
          href="plm.gmftool#//@palette/@tools.0/@tools.0"/>
      <diagramNode
          href="plm.gmfgraph#DeepModel"/>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="../../org.melanee.core.models.plm/model/PLM.ecore#//DeepModel/enumeration"/>
        <ownedChild>
          <domainMetaElement
              href="../../org.melanee.core.models.plm/model/PLM.ecore#//Enumeration"/>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              editorPattern="">
            <diagramLabel
                href="plm.gmfgraph#EnumerationNameLabel"/>
            <features
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
            <editableFeatures
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern="{0}">
            <diagramLabel
                href="plm.gmfgraph#EnumerationLiteralsLabel"/>
            <features
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Enumeration/literal"/>
            <editableFeatures
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Enumeration/literal"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="plm.gmftool#//@palette/@tools.0/@tools.2"/>
          <diagramNode
              href="plm.gmfgraph#Enumeration"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.1">
        <containmentFeature
            href="../../org.melanee.core.models.plm/model/PLM.ecore#//DeepModel/content"/>
        <ownedChild>
          <domainMetaElement
              href="../../org.melanee.core.models.plm/model/PLM.ecore#//Level"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:ReferenceNewElementSpec">
              <feature
                  xsi:type="ecore:EReference"
                  href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
              <newElementInitializers>
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                  <value
                      body="self.getDefaultVisualizationValues()"/>
                </initializers>
              </newElementInitializers>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
              <value
                  body="let index:Integer = &#xD;&#xA;&#x9;self.getDeepModel().content->indexOf(self) - 1&#xD;&#xA;in&#xD;&#xA;let indexAsString:String = if (index > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(index.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (index = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#x9;'O'.concat(indexAsString)"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping">
            <diagramLabel
                href="plm.gmfgraph#ModelFigureNameLabel"/>
            <features
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:ExpressionLabelMapping"
              readOnly="true">
            <diagramLabel
                href="plm.gmfgraph#ModelFigureAVSLabel"/>
            <viewExpression
                body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;--**********************************&#xD;&#xA;--Check if attributes are rendered in tvs&#xD;&#xA;--**********************************&#xD;&#xA;let renderName:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'tvs'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the name&#xD;&#xA;--**********************************&#xD;&#xA;let name : String =&#xD;&#xA;&#x9;if (renderName) then&#xD;&#xA;&#x9;&#x9;'name='.concat(self.name).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let output:String = &#xD;&#xA;&#x9;'{'.concat(name).concat('}')&#xD;&#xA;in&#xD;&#xA;--**********************************&#xD;&#xA;--Write the output&#xD;&#xA;--**********************************&#xD;&#xA;if (output &lt;> '{}') then&#xD;&#xA;&#x9;output&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="plm.gmftool#//@palette/@tools.0/@tools.1"/>
          <diagramNode
              href="plm.gmfgraph#Level"/>
          <children
              compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@compartments.0">
            <containmentFeature
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Level/content"/>
            <ownedChild>
              <domainMetaElement
                  href="../../org.melanee.core.models.plm/model/PLM.ecore#//Connection"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:ReferenceNewElementSpec">
                  <feature
                      xsi:type="ecore:EReference"
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                  <newElementInitializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                      <value
                          body="self.getDefaultVisualizationValues()"/>
                    </initializers>
                  </newElementInitializers>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#ConnectionFigureName"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderName:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'default'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;if (renderName and not self.name.oclIsUndefined()) then&#xD;&#xA;&#x9;self.name&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#ConnectionFigureNameExternal"/>
                <features
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#ConnectionFigureLevelLabel"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderLevel:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('levelIndex') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('levelIndex') = 'default'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;if (renderLevel) then&#xD;&#xA;&#x9;self.levelIndex&#xD;&#xA;else&#xD;&#xA;&#x9;' '&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#ConnectionFigurePotency"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderPotency:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('potency') = 'max' &#xD;&#xA;&#x9;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('potency') = 'default') -- and (self.potency &lt;> 1)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let potency:String = if (self.potency > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(self.potency.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (self.potency = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;if (renderPotency) then&#xD;&#xA;&#x9;potency&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#ConnectionAVSLabel"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;--**********************************&#xD;&#xA;--Check if attributes are rendered in tvs&#xD;&#xA;--**********************************&#xD;&#xA;let renderName:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'tvs'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderPotency:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('potency') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('potency') = 'tvs' &#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderLevel:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('level') = 'max'&#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('level') = 'tvs'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the name&#xD;&#xA;--**********************************&#xD;&#xA;let name : String =&#xD;&#xA;&#x9;if (renderName) then&#xD;&#xA;&#x9;&#x9;'name='.concat(self.name).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the potency&#xD;&#xA;--**********************************&#xD;&#xA;let potencyString:String = &#xD;&#xA;&#x9;if (renderPotency and self.potency > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(self.potency.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (self.potency = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let potency: String = &#xD;&#xA;&#x9;if (renderPotency) then&#xD;&#xA;&#x9;&#x9;'potency='.concat(potencyString).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the level&#xD;&#xA;--**********************************&#xD;&#xA;let levelString:String = &#xD;&#xA;&#x9;if (renderLevel and self.levelIndex > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(self.levelIndex.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (self.levelIndex = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let level: String = &#xD;&#xA;&#x9;if (renderLevel) then&#xD;&#xA;&#x9;&#x9;'level='.concat(levelString).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let output:String = &#xD;&#xA;&#x9;'{'.concat(name).concat(potency).concat(level).concat('}')&#xD;&#xA;in&#xD;&#xA;--**********************************&#xD;&#xA;--Write the output&#xD;&#xA;--**********************************&#xD;&#xA;if (output &lt;> '{}') then&#xD;&#xA;&#x9;output&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#ConnectionFigureProximityClassificationLabel"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderClassification:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('ProximityClassification') = '1' &#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;if (renderClassification) then&#xD;&#xA;&#x9;if (Classification.allInstances()->select(i | i.instance = self)->size() > 0) then&#xD;&#xA;&#x9;&#x9;':'.concat(Classification.allInstances()->select(i | i.instance = self)->asOrderedSet()->first().type.name)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <diagramNode
                  href="plm.gmfgraph#Connection"/>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@compartments.0">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/feature"/>
                <ownedChild>
                  <domainMetaElement
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Attribute"/>
                  <domainInitializer
                      xsi:type="gmfmap:FeatureSeqInitializer">
                    <initializers
                        xsi:type="gmfmap:ReferenceNewElementSpec">
                      <feature
                          xsi:type="ecore:EReference"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                      <newElementInitializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                          <value
                              body="self.getDefaultVisualizationValues()"/>
                        </initializers>
                      </newElementInitializers>
                    </initializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Feature/durability"/>
                      <value
                          body="-- This is needed to prevent setting a if one was already set at creation of the semantic model element&#xD;&#xA;-- This can happen when changing values through the refactoring service during creation&#xD;&#xA;let attribute : ecore::EAttribute =&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eClass().eAllAttributes->select(a | a.name = 'durability')->first().oclAsType(ecore::EAttribute)&#xD;&#xA;in&#xD;&#xA;let isSet:Boolean = &#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eIsSet(attribute)&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not isSet) then&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency&#xD;&#xA;-- If set use the old value&#xD;&#xA;else&#xD;&#xA;&#x9;self.durability&#xD;&#xA;endif"/>
                    </initializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Attribute/mutability"/>
                      <value
                          body="-- This is needed to prevent setting a if one was already set at creation of the semantic model element&#xD;&#xA;-- This can happen when changing values through the refactoring service during creation&#xD;&#xA;let attribute : ecore::EAttribute =&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eClass().eAllAttributes->select(a | a.name = 'mutability')->first().oclAsType(ecore::EAttribute)&#xD;&#xA;in&#xD;&#xA;let isSet:Boolean = &#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eIsSet(attribute)&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not isSet) then&#xD;&#xA;&#x9;self.durability&#xD;&#xA;-- If set use the old value&#xD;&#xA;else&#xD;&#xA;&#x9;self.mutability&#xD;&#xA;endif"/>
                    </initializers>
                  </domainInitializer>
                  <labelMappings
                      xsi:type="gmfmap:FeatureLabelMapping"
                      viewPattern="">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureNameLabel"/>
                    <features
                        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureDurabilityLabel"/>
                    <viewExpression
                        body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderDurability:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('durability') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('durability') = 'default') and (self.durability &lt;> self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let durability:String = &#xD;&#xA;&#x9;self.getDurabilityAsString()&#xD;&#xA;in&#xD;&#xA;if (renderDurability) then&#xD;&#xA;&#x9;durability&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureDataTypeLabel"/>
                    <viewExpression
                        body="if (self.datatype.oclIsUndefined() or self.datatype = '') then&#xD;&#xA;&#x9;''&#xD;&#xA;else&#xD;&#xA;&#x9;':'.concat(self.datatype)&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureDefaultValueLabel"/>
                    <viewExpression
                        body="if (not self.value.oclIsUndefined() and self.value &lt;> '') then&#xD;&#xA;&#x9;'='.concat(self.value)&#xD;&#xA;else &#xD;&#xA;&#x9;if (self.mutability &lt;> self.durability) then&#xD;&#xA;&#x9;&#x9;'='&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureValueVariabilityLabel"/>
                    <viewExpression
                        body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderValueVariability:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('mutability') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('mutability') = 'default') and (self.mutability &lt;> self.durability)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let mutability:String =&#xD;&#xA;&#x9;self.getMutabilityAsString()&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (renderValueVariability) then&#xD;&#xA;&#x9;mutability&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <tool
                      xsi:type="gmftool:CreationTool"
                      href="plm.gmftool#//@palette/@tools.1/@tools.2"/>
                  <diagramNode
                      href="plm.gmfgraph#AttributeNode"/>
                </ownedChild>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@compartments.1">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/feature"/>
                <ownedChild>
                  <domainMetaElement
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Method"/>
                  <domainInitializer
                      xsi:type="gmfmap:FeatureSeqInitializer">
                    <initializers
                        xsi:type="gmfmap:ReferenceNewElementSpec">
                      <feature
                          xsi:type="ecore:EReference"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                      <newElementInitializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                          <value
                              body="self.getDefaultVisualizationValues()"/>
                        </initializers>
                      </newElementInitializers>
                    </initializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Feature/durability"/>
                      <value
                          body="-- This is needed to prevent setting a if one was already set at creation of the semantic model element&#xD;&#xA;-- This can happen when changing values through the refactoring service during creation&#xD;&#xA;let attribute : ecore::EAttribute =&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eClass().eAllAttributes->select(a | a.name = 'durability')->first().oclAsType(ecore::EAttribute)&#xD;&#xA;in&#xD;&#xA;let isSet:Boolean = &#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eIsSet(attribute)&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not isSet) then&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency&#xD;&#xA;-- If set use the old value&#xD;&#xA;else&#xD;&#xA;&#x9;self.durability&#xD;&#xA;endif"/>
                    </initializers>
                  </domainInitializer>
                  <labelMappings
                      xsi:type="gmfmap:FeatureLabelMapping">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigureNameLabel"/>
                    <features
                        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigureInputLabel"/>
                    <viewExpression
                        body="let input:OrderedSet(Parameter) = self.getInput()&#xD;&#xA;in&#xD;&#xA;'('.concat(Sequence{1..input->size()}->iterate(i:Integer; str:String = '' | &#xD;&#xA;&#x9;let iAsString:String = &#xD;&#xA;&#x9;&#x9;OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(denominator : Integer; s : String = ''|&#xD;&#xA;            &#x9;&#x9;let numberAsString : String = OrderedSet{&#xD;&#xA;                    &#x9;&#x9;'0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                &#x9;}->at(i.div(denominator).mod(10) + 1)&#xD;&#xA;            &#x9;&#x9;in&#xD;&#xA;                &#x9;&#x9;if s='' and numberAsString = '0' then&#xD;&#xA;                    &#x9;&#x9;&#x9;s&#xD;&#xA;                &#x9;&#x9;else&#xD;&#xA;                    &#x9;&#x9;&#x9;s.concat(numberAsString)&#xD;&#xA;                &#x9;&#x9;endif&#xD;&#xA;        &#x9;)&#xD;&#xA;&#x9;in&#xD;&#xA;&#x9;&#x9;if (i &lt;> input->size()) then&#xD;&#xA;&#x9;&#x9;&#x9;str.concat(input->at(i).oclAsType(ecore::EObject).eClass().name).concat(' ').concat(input->at(i).name).concat(', ')&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;str.concat(input->at(i).oclAsType(ecore::EObject).eClass().name).concat(' ').concat(input->at(i).name)&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;)&#xD;&#xA;).concat(')')"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigurePotencyLabel"/>
                    <viewExpression
                        body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderDurability:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('durability') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('durability') = 'default') and (self.durability &lt;>self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let durability:String = &#xD;&#xA;&#x9;self.getDurabilityAsString()&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (renderDurability) then&#xD;&#xA;&#x9;durability&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigureOutputLabel"/>
                    <viewExpression
                        body="let output:OrderedSet(Parameter) = self.getInput()&#xD;&#xA;in&#xD;&#xA;if (output->size() > 0) then&#xD;&#xA;&#x9;':'.concat(Sequence{1..output->size()}->iterate(i:Integer; str:String = '' | &#xD;&#xA;&#x9;&#x9;let iAsString:String = &#xD;&#xA;&#x9;&#x9;&#x9;OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(denominator : Integer; s : String = ''|&#xD;&#xA;       &#x9;     &#x9;&#x9;let numberAsString : String = OrderedSet{&#xD;&#xA;&#x9;                    &#x9;&#x9;'0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                &#x9;&#x9;}->at(i.div(denominator).mod(10) + 1)&#xD;&#xA;            &#x9;&#x9;&#x9;in&#xD;&#xA;       &#x9;         &#x9;&#x9;if s='' and numberAsString = '0' then&#xD;&#xA;&#x9;                    &#x9;&#x9;&#x9;s&#xD;&#xA;                &#x9;&#x9;&#x9;else&#xD;&#xA;                    &#x9;&#x9;&#x9;&#x9;s.concat(numberAsString)&#xD;&#xA;              &#x9;  &#x9;&#x9;endif&#xD;&#xA;       &#x9; &#x9;)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;if (i &lt;> output->size()) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;str.concat(output->at(i).name).concat(', ')&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;str.concat(output->at(i).name)&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9;)&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <tool
                      xsi:type="gmftool:CreationTool"
                      href="plm.gmftool#//@palette/@tools.1/@tools.3"/>
                  <diagramNode
                      href="plm.gmfgraph#MethodNode"/>
                </ownedChild>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@compartments.2"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/content"/>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@compartments.2"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/content"/>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@compartments.2"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.1/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/content"/>
              </children>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@children.0">
                <compartment
                    href="plm.gmfgraph#ConnectionAttributesCompartment"/>
              </compartments>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@children.1">
                <compartment
                    href="plm.gmfgraph#ConnectionMethodsCompartment"/>
              </compartments>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@children.2 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@children.3 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild/@children.4">
                <compartment
                    href="plm.gmfgraph#ConnectionContentsCompartment"/>
              </compartments>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@compartments.0">
            <containmentFeature
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Level/content"/>
            <ownedChild>
              <domainMetaElement
                  href="../../org.melanee.core.models.plm/model/PLM.ecore#//Inheritance"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:ReferenceNewElementSpec">
                  <feature
                      xsi:type="ecore:EReference"
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                  <newElementInitializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                      <value
                          body="self.getDefaultVisualizationValues()"/>
                    </initializers>
                  </newElementInitializers>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#GeneralizationName"/>
                <features
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#GeneralizationNameExternal"/>
                <features
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#GeneralizationSubtitle"/>
                <viewExpression
                    body="let disjoint:String = &#xD;&#xA;&#x9;if (not self.disjoint.oclIsUndefined() and self.disjoint) then &#xD;&#xA;&#x9;&#x9;'disjoint;' &#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;'' &#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let complete:String = &#xD;&#xA;&#x9;if (not self.complete.oclIsUndefined() and self.complete) then &#xD;&#xA;&#x9;&#x9;'complete;' &#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;'' &#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;if (disjoint &lt;> '' or complete &lt;> '') then&#xD;&#xA;&#x9;'{'.concat(complete).concat(disjoint).concat('}')&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="plm.gmftool#//@palette/@tools.2/@tools.1"/>
              <diagramNode
                  href="plm.gmfgraph#Generalization"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@compartments.0">
            <containmentFeature
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Level/content"/>
            <ownedChild>
              <domainMetaElement
                  href="../../org.melanee.core.models.plm/model/PLM.ecore#//Entity"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:ReferenceNewElementSpec">
                  <feature
                      xsi:type="ecore:EReference"
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                  <newElementInitializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                      <value
                          body="self.getDefaultVisualizationValues()"/>
                    </initializers>
                  </newElementInitializers>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#EntityFigureNameLabel"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderName:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'default'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;if (renderName and not self.name.oclIsUndefined()) then&#xD;&#xA;&#x9;self.name&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#EntityFigurePotencyLabel"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderPotency:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('potency') = 'max' &#xD;&#xA;&#x9;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('potency') = 'default') -- and (self.potency &lt;> 1)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let potency:String =&#xD;&#xA;&#x9;self.getPotencyAsString()&#xD;&#xA;in&#xD;&#xA;if (renderPotency) then&#xD;&#xA;&#x9;potency&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#EntityFigureLevelLabel"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderLevel:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('levelIndex') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('levelIndex') = 'default'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;if (renderLevel) then&#xD;&#xA;&#x9;self.levelIndex&#xD;&#xA;else&#xD;&#xA;&#x9;' '&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#EntityFigureAVSLabel"/>
                <viewExpression
                    body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Check if attributes are rendered in tvs&#xD;&#xA;--**********************************&#xD;&#xA;let renderName:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('name') = 'tvs'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderPotency:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('potency') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('potency') = 'tvs' &#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderLevel:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('level') = 'max'&#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('level') = 'tvs'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the name&#xD;&#xA;--**********************************&#xD;&#xA;let name : String =&#xD;&#xA;&#x9;if (renderName) then&#xD;&#xA;&#x9;&#x9;'name='.concat(self.name).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the potency&#xD;&#xA;--**********************************&#xD;&#xA;let potencyString:String = &#xD;&#xA;&#x9;if (renderPotency and self.potency > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(self.potency.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (self.potency = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let potency: String = &#xD;&#xA;&#x9;if (renderPotency) then&#xD;&#xA;&#x9;&#x9;'potency='.concat(potencyString).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Get the level&#xD;&#xA;--**********************************&#xD;&#xA;let levelString:String = &#xD;&#xA;&#x9;if (renderLevel and self.levelIndex > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(self.levelIndex.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (self.levelIndex = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let level: String = &#xD;&#xA;&#x9;if (renderLevel) then&#xD;&#xA;&#x9;&#x9;'level='.concat(levelString).concat('; ')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;let output:String = &#xD;&#xA;&#x9;'{'.concat(name).concat(potency).concat(level).concat('}')&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--**********************************&#xD;&#xA;--Write the output&#xD;&#xA;--**********************************&#xD;&#xA;if (output &lt;> '{}') then&#xD;&#xA;&#x9;output&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:DesignLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="plm.gmfgraph#EntityFigureProximityClassificationLabel"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:DesignLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#EntityFigureNameExternal"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="plm.gmftool#//@palette/@tools.1/@tools.0"/>
              <diagramNode
                  href="plm.gmfgraph#Entity"/>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@compartments.0">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/feature"/>
                <ownedChild>
                  <domainMetaElement
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Attribute"/>
                  <domainInitializer
                      xsi:type="gmfmap:FeatureSeqInitializer">
                    <initializers
                        xsi:type="gmfmap:ReferenceNewElementSpec">
                      <feature
                          xsi:type="ecore:EReference"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                      <newElementInitializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                          <value
                              body="self.getDefaultVisualizationValues()"/>
                        </initializers>
                      </newElementInitializers>
                    </initializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Feature/durability"/>
                      <value
                          body="-- This is needed to prevent setting a if one was already set at creation of the semantic model element&#xD;&#xA;-- This can happen when changing values through the refactoring service during creation&#xD;&#xA;let attribute : ecore::EAttribute =&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eClass().eAllAttributes->select(a | a.name = 'durability')->first().oclAsType(ecore::EAttribute)&#xD;&#xA;in&#xD;&#xA;let isSet:Boolean = &#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eIsSet(attribute)&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not isSet) then&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency&#xD;&#xA;-- If set use the old value&#xD;&#xA;else&#xD;&#xA;&#x9;self.durability&#xD;&#xA;endif"/>
                    </initializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Attribute/mutability"/>
                      <value
                          body="-- This is needed to prevent setting a if one was already set at creation of the semantic model element&#xD;&#xA;-- This can happen when changing values through the refactoring service during creation&#xD;&#xA;let attribute : ecore::EAttribute =&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eClass().eAllAttributes->select(a | a.name = 'mutability')->first().oclAsType(ecore::EAttribute)&#xD;&#xA;in&#xD;&#xA;let isSet:Boolean = &#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eIsSet(attribute)&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not isSet) then&#xD;&#xA;&#x9;self.durability&#xD;&#xA;-- If set use the old value&#xD;&#xA;else&#xD;&#xA;&#x9;self.mutability&#xD;&#xA;endif"/>
                    </initializers>
                  </domainInitializer>
                  <labelMappings
                      xsi:type="gmfmap:FeatureLabelMapping"
                      viewPattern="">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureNameLabel"/>
                    <features
                        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureDurabilityLabel"/>
                    <viewExpression
                        body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderDurability:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('durability') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('durability') = 'default') and (self.durability &lt;> self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let durability:String = &#xD;&#xA;&#x9;self.getDurabilityAsString()&#xD;&#xA;in&#xD;&#xA;if (renderDurability) then&#xD;&#xA;&#x9;durability&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureDataTypeLabel"/>
                    <viewExpression
                        body="if (self.datatype.oclIsUndefined() or self.datatype = '') then&#xD;&#xA;&#x9;''&#xD;&#xA;else&#xD;&#xA;&#x9;':'.concat(self.datatype)&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureDefaultValueLabel"/>
                    <viewExpression
                        body="if (not self.value.oclIsUndefined() and self.value &lt;> '') then&#xD;&#xA;&#x9;'='.concat(self.value)&#xD;&#xA;else &#xD;&#xA;&#x9;if (self.mutability &lt;> self.durability) then&#xD;&#xA;&#x9;&#x9;'='&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#AttributeFigureValueVariabilityLabel"/>
                    <viewExpression
                        body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderValueVariability:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('mutability') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('mutability') = 'default') and (self.mutability &lt;> self.durability)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let mutability:String = &#xD;&#xA;&#x9;self.getMutabilityAsString()&#xD;&#xA;in&#xD;&#xA;if (renderValueVariability) then&#xD;&#xA;&#x9;mutability&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <tool
                      xsi:type="gmftool:CreationTool"
                      href="plm.gmftool#//@palette/@tools.1/@tools.2"/>
                  <diagramNode
                      href="plm.gmfgraph#AttributeNode"/>
                </ownedChild>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@compartments.1">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/feature"/>
                <ownedChild>
                  <domainMetaElement
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Method"/>
                  <domainInitializer
                      xsi:type="gmfmap:FeatureSeqInitializer">
                    <initializers
                        xsi:type="gmfmap:ReferenceNewElementSpec">
                      <feature
                          xsi:type="ecore:EReference"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                      <newElementInitializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                          <value
                              body="self.getDefaultVisualizationValues()"/>
                        </initializers>
                      </newElementInitializers>
                    </initializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//Feature/durability"/>
                      <value
                          body="-- This is needed to prevent setting a if one was already set at creation of the semantic model element&#xD;&#xA;-- This can happen when changing values through the refactoring service during creation&#xD;&#xA;let attribute : ecore::EAttribute =&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eClass().eAllAttributes->select(a | a.name = 'durability')->first().oclAsType(ecore::EAttribute)&#xD;&#xA;in&#xD;&#xA;let isSet:Boolean = &#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eIsSet(attribute)&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not isSet) then&#xD;&#xA;&#x9;self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency&#xD;&#xA;-- If set use the old value&#xD;&#xA;else&#xD;&#xA;&#x9;self.durability&#xD;&#xA;endif"/>
                    </initializers>
                  </domainInitializer>
                  <labelMappings
                      xsi:type="gmfmap:FeatureLabelMapping">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigureNameLabel"/>
                    <features
                        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigureInputLabel"/>
                    <viewExpression
                        body="let input:OrderedSet(Parameter) = self.getInput()&#xD;&#xA;in&#xD;&#xA;'('.concat(Sequence{1..input->size()}->iterate(i:Integer; str:String = '' | &#xD;&#xA;&#x9;let iAsString:String = &#xD;&#xA;&#x9;&#x9;OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(denominator : Integer; s : String = ''|&#xD;&#xA;            &#x9;&#x9;let numberAsString : String = OrderedSet{&#xD;&#xA;                    &#x9;&#x9;'0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                &#x9;}->at(i.div(denominator).mod(10) + 1)&#xD;&#xA;            &#x9;&#x9;in&#xD;&#xA;                &#x9;&#x9;if s='' and numberAsString = '0' then&#xD;&#xA;                    &#x9;&#x9;&#x9;s&#xD;&#xA;                &#x9;&#x9;else&#xD;&#xA;                    &#x9;&#x9;&#x9;s.concat(numberAsString)&#xD;&#xA;                &#x9;&#x9;endif&#xD;&#xA;        &#x9;)&#xD;&#xA;&#x9;in&#xD;&#xA;&#x9;&#x9;if (i &lt;> input->size()) then&#xD;&#xA;&#x9;&#x9;&#x9;str.concat(input->at(i).oclAsType(ecore::EObject).eClass().name).concat(' ').concat(input->at(i).name).concat(', ')&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;str.concat(input->at(i).oclAsType(ecore::EObject).eClass().name).concat(' ').concat(input->at(i).name)&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;)&#xD;&#xA;).concat(')')"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigurePotencyLabel"/>
                    <viewExpression
                        body="let renderingInformationAvailable:Boolean = &#xD;&#xA;&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let visualizer:LMLVisualizer =&#xD;&#xA;&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;&#x9;&#x9;self.visualizer->first()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let renderDurability:Boolean =&#xD;&#xA;&#x9;if (renderingInformationAvailable) then&#xD;&#xA;&#x9;&#x9;visualizer.getValueForKey('durability') = 'max' &#xD;&#xA;&#x9;&#x9;or &#xD;&#xA;&#x9;&#x9;(visualizer.getValueForKey('durability') = 'default') and (self.durability &lt;> self.oclAsType(ecore::EObject).eContainer().oclAsType(Clabject).potency)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;let durability:String = &#xD;&#xA;&#x9;self.getDurabilityAsString()&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (renderDurability) then&#xD;&#xA;&#x9;durability&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <labelMappings
                      xsi:type="gmfmap:ExpressionLabelMapping"
                      readOnly="true">
                    <diagramLabel
                        href="plm.gmfgraph#EntityMethodFigureOutputLabel"/>
                    <viewExpression
                        body="let output:OrderedSet(Parameter) = self.getInput()&#xD;&#xA;in&#xD;&#xA;if (output->size() > 0) then&#xD;&#xA;&#x9;':'.concat(Sequence{1..output->size()}->iterate(i:Integer; str:String = '' | &#xD;&#xA;&#x9;&#x9;let iAsString:String = &#xD;&#xA;&#x9;&#x9;&#x9;OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(denominator : Integer; s : String = ''|&#xD;&#xA;       &#x9;     &#x9;&#x9;let numberAsString : String = OrderedSet{&#xD;&#xA;&#x9;                    &#x9;&#x9;'0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                &#x9;&#x9;}->at(i.div(denominator).mod(10) + 1)&#xD;&#xA;            &#x9;&#x9;&#x9;in&#xD;&#xA;       &#x9;         &#x9;&#x9;if s='' and numberAsString = '0' then&#xD;&#xA;&#x9;                    &#x9;&#x9;&#x9;s&#xD;&#xA;                &#x9;&#x9;&#x9;else&#xD;&#xA;                    &#x9;&#x9;&#x9;&#x9;s.concat(numberAsString)&#xD;&#xA;              &#x9;  &#x9;&#x9;endif&#xD;&#xA;       &#x9; &#x9;)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;if (i &lt;> output->size()) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;str.concat(output->at(i).name).concat(', ')&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;str.concat(output->at(i).name)&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9;)&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
                  </labelMappings>
                  <tool
                      xsi:type="gmftool:CreationTool"
                      href="plm.gmftool#//@palette/@tools.1/@tools.3"/>
                  <diagramNode
                      href="plm.gmfgraph#MethodNode"/>
                </ownedChild>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@compartments.2"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/content"/>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@compartments.2"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/content"/>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@compartments.2"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.1/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Clabject/content"/>
              </children>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@children.0">
                <compartment
                    href="plm.gmfgraph#EntityAttributesCompartment"/>
              </compartments>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@children.1">
                <compartment
                    href="plm.gmfgraph#EntityMethodsCompartment"/>
              </compartments>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@children.2 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@children.3 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild/@children.4">
                <compartment
                    href="plm.gmfgraph#EntityContentsCompartment"/>
              </compartments>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@compartments.0">
            <containmentFeature
                href="../../org.melanee.core.models.plm/model/PLM.ecore#//Level/content"/>
            <ownedChild>
              <domainMetaElement
                  href="../../org.melanee.core.models.plm/model/PLM.ecore#//Package"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:ReferenceNewElementSpec">
                  <feature
                      xsi:type="ecore:EReference"
                      href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/visualizer"/>
                  <newElementInitializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.melanee.core.models.plm/model/PLM.ecore#//LMLVisualizer/attributes"/>
                      <value
                          body="self.getDefaultVisualizationValues()"/>
                    </initializers>
                  </newElementInitializers>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping">
                <diagramLabel
                    href="plm.gmfgraph#PackageNameLabel"/>
                <features
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Element/name"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="plm.gmftool#//@palette/@tools.0/@tools.3"/>
              <diagramNode
                  href="plm.gmfgraph#PackageNode"/>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@compartments.0"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Package/content"/>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@compartments.0"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Package/content"/>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@compartments.0"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.1/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Package/content"/>
              </children>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@compartments.0"
                  referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild">
                <containmentFeature
                    href="../../org.melanee.core.models.plm/model/PLM.ecore#//Package/content"/>
              </children>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@children.0 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@children.1 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@children.2 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3/@ownedChild/@children.3">
                <compartment
                    href="plm.gmfgraph#PackageContentCompartment"/>
              </compartments>
            </ownedChild>
          </children>
          <compartments
              children="//@nodes.0/@ownedChild/@children.1/@ownedChild/@children.0 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.1 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.2 //@nodes.0/@ownedChild/@children.1/@ownedChild/@children.3">
            <compartment
                href="plm.gmfgraph#DomainElementsCompartment"/>
          </compartments>
        </ownedChild>
      </children>
      <compartments
          children="//@nodes.0/@ownedChild/@children.0">
        <compartment
            href="plm.gmfgraph#DeepModelEnumerationCompartment"/>
      </compartments>
      <compartments
          children="//@nodes.0/@ownedChild/@children.1">
        <compartment
            href="plm.gmfgraph#DeepModelLevelCompartment"/>
      </compartments>
    </ownedChild>
  </nodes>
  <links>
    <domainMetaElement
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Classification"/>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="plm.gmfgraph#ClassificationBlueprintNameLabel"/>
      <viewExpression
          body="let renderConnectionEndName:Boolean=&#xD;&#xA;&#x9;if (DeepModel.allInstances()->asSequence()->at(1).visualizer->asSequence()->at(1).getValueForKey('showClassificationConnectionEndNames') = 'true') then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (renderConnectionEndName and self.kind = ClassificationKind::instantiation) then&#xD;&#xA;&#x9;'blueprint'&#xD;&#xA;else&#xD;&#xA;&#x9;if (renderConnectionEndName and self.kind = ClassificationKind::instance) then&#xD;&#xA;&#x9;&#x9;'type'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;if (renderConnectionEndName and self.kind = ClassificationKind::isonym) then&#xD;&#xA;&#x9;&#x9;&#x9;'complete type'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;if (renderConnectionEndName and self.kind = ClassificationKind::hyponym) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'incomplete type'&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
    </labelMappings>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="plm.gmfgraph#ClassificationTypeNameLabel"/>
      <viewExpression
          body="let renderConnectionEndName:Boolean=&#xD;&#xA;&#x9;if (DeepModel.allInstances()->asSequence()->at(1).visualizer->asSequence()->at(1).getValueForKey('showClassificationConnectionEndNames') = 'true') then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (renderConnectionEndName and self.kind = ClassificationKind::instantiation) then&#xD;&#xA;&#x9;'offspring'&#xD;&#xA;else&#xD;&#xA;&#x9;if (renderConnectionEndName and self.kind = ClassificationKind::instance) then&#xD;&#xA;&#x9;&#x9;'instance'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;if (renderConnectionEndName and self.kind = ClassificationKind::isonym) then&#xD;&#xA;&#x9;&#x9;&#x9;'isonym'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;if (renderConnectionEndName and self.kind = ClassificationKind::hyponym) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'hyponym'&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
    </labelMappings>
    <containmentFeature
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Level/content"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="plm.gmftool#//@palette/@tools.2/@tools.0"/>
    <diagramLink
        href="plm.gmfgraph#Classification"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Classification/instance"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Classification/type"/>
    <creationConstraints>
      <targetEnd
          body="self.potency &lt;> 0 and self.levelIndex &lt; oppositeEnd.levelIndex"/>
    </creationConstraints>
  </links>
  <links>
    <domainMetaElement
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Supertype"/>
    <containmentFeature
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Inheritance/supertype"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="plm.gmftool#//@palette/@tools.2/@tools.2"/>
    <diagramLink
        href="plm.gmfgraph#SuperTypeConnection"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Supertype/inheritance"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Supertype/supertype"/>
    <creationConstraints>
      <targetEnd
          body="oppositeEnd.getLevel() = self.getLevel()"/>
    </creationConstraints>
  </links>
  <links>
    <domainMetaElement
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Subtype"/>
    <containmentFeature
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Inheritance/subtype"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="plm.gmftool#//@palette/@tools.2/@tools.2"/>
    <diagramLink
        href="plm.gmfgraph#SubTypeConnection"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Subtype/inheritance"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Subtype/subtype"/>
    <creationConstraints>
      <targetEnd
          body="oppositeEnd.getLevel() = self.getLevel()"/>
    </creationConstraints>
  </links>
  <links>
    <domainMetaElement
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//ConnectionEnd"/>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="plm.gmfgraph#ConnectionParticipantFigureName"/>
      <viewExpression
          body="if (self.moniker.oclIsUndefined()) then&#xD;&#xA;&#x9;''&#xD;&#xA;else&#xD;&#xA;&#x9;self.moniker&#xD;&#xA;endif"/>
    </labelMappings>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="plm.gmfgraph#ConnectionParticipantMultiplicity"/>
      <viewExpression
          body="--A participation has no visualizer yet&#xD;&#xA;--let renderingInformationAvailable:Boolean = &#xD;&#xA;--&#x9;if (self.visualizer->size() > 0) then&#xD;&#xA;--&#x9;&#x9;true&#xD;&#xA;--&#x9;else&#xD;&#xA;--&#x9;&#x9;false&#xD;&#xA;--&#x9;endif&#xD;&#xA;--in&#xD;&#xA;&#xD;&#xA;--is a visualizer present?&#xD;&#xA;--let visualizer:LMLVisualizer =&#xD;&#xA;--&#x9;if (renderingInformationAvailable)&#x9;then&#xD;&#xA;--&#x9;&#x9;self.visualizer->first()&#xD;&#xA;--&#x9;else&#xD;&#xA;--&#x9;&#x9;null&#xD;&#xA;--&#x9;endif&#xD;&#xA;--in&#xD;&#xA;&#xD;&#xA;--here for the DSL mode needs to be checked&#xD;&#xA;let multiplicityPotency:Boolean = true&#xD;&#xA;--&#x9;if (renderingInformationAvailable) then&#xD;&#xA;--&#x9;&#x9;visualizer.getValueForKey('potency') = 'max' &#xD;&#xA;--&#x9;&#x9;&#x9;or &#xD;&#xA;--&#x9;&#x9;(visualizer.getValueForKey('potency') = 'default') and (self.potency &lt;> 1)&#xD;&#xA;--&#x9;else&#xD;&#xA;--&#x9;&#x9;true&#xD;&#xA;--&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;--If lower is null we do not want to show anything in the label&#xD;&#xA;let lowerIsNull:Boolean = self.lower.oclIsUndefined() in&#xD;&#xA;&#xD;&#xA;let lowerString:String = if (self.lower > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(self.lower.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (self.lower = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;let upperString:String = if (self.upper > 0) then OrderedSet{1000000, 10000, 1000, 100, 10, 1}->iterate(&#xD;&#xA;            denominator : Integer;&#xD;&#xA;            s : String = ''|&#xD;&#xA;            let numberAsString : String = OrderedSet{&#xD;&#xA;                    '0','1','2','3','4','5','6','7','8','9'&#xD;&#xA;                }->at(self.upper.div(denominator).mod(10) + 1)&#xD;&#xA;            in&#xD;&#xA;                if s='' and numberAsString = '0' then&#xD;&#xA;                    s&#xD;&#xA;                else&#xD;&#xA;                    s.concat(numberAsString)&#xD;&#xA;                endif&#xD;&#xA;        )&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;if (self.upper = 0) then&#xD;&#xA;&#x9;&#x9;&#x9;'0'&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'*'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not lowerIsNull) then&#xD;&#xA;&#x9;if (self.lower = 0 and self.upper = -1) then&#xD;&#xA;&#x9;&#x9;'*'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;if (self.lower = self.upper) then&#xD;&#xA;&#x9;&#x9;&#x9;self.lower&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;lowerString.concat('..').concat(upperString)&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif"/>
    </labelMappings>
    <containmentFeature
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Connection/connectionEnd"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="plm.gmftool#//@palette/@tools.1/@tools.1"/>
    <diagramLink
        href="plm.gmfgraph#ConnectionParticipation"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//ConnectionEnd/connection"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//ConnectionEnd/destination"/>
    <creationConstraints>
      <targetEnd
          body="self.levelIndex = oppositeEnd.levelIndex"/>
    </creationConstraints>
  </links>
  <diagram>
    <diagramCanvas
        href="plm.gmfgraph#PLM"/>
    <domainModel
        href="../../org.melanee.core.models.plm/model/PLM.ecore#/"/>
    <domainMetaElement
        href="../../org.melanee.core.models.plm/model/PLM.ecore#//Domain"/>
    <palette
        href="plm.gmftool#//@palette"/>
  </diagram>
  <audits
      id="org.melanee.core.auditcontainer"
      name="MelaneeAuditContainer"
      description="!!!!! THIS CONTAINER IS NEEDED SO THAT A CLIENT CONTEXT FOR GENERATION IS GENERATED !!!!!!">
    <audits
        name="EMPTY AUDIT RULE"
        description="EMPTY AUDIT RULE"
        id="org.melanee.core.emptyrule"
        message="EMPTY AUDIT RULE">
      <rule
          body="true"/>
      <target
          xsi:type="gmfmap:DomainElementTarget">
        <element
            href="../../org.melanee.core.models.plm/model/PLM.ecore#//Domain"/>
      </target>
    </audits>
  </audits>
</gmfmap:Mapping>
