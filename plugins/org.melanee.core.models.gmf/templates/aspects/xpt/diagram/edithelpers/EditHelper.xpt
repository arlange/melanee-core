«REM»***************************************************************************
 * Copyright (c) 2011, 2012 University of Mannheim: Chair for Software Engineering
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Ralph Gerbig - initial API and implementation and initial documentation
 *******************************************************************************«ENDREM»
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«AROUND additions FOR gmfgen::MetamodelType»
	/**
	 * This method is responsible to clean up all elements to 
	 * which the deleted elment is connected. 
	 *
	 * These include
	 * - Inheritance, Connection and Classification
	 * - Links to remote model elements
	 *
	 */
	@Override
	protected org.eclipse.gmf.runtime.common.core.command.ICommand getDestroyElementCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest req) {
		
		org.eclipse.gmf.runtime.common.core.command.CompositeCommand compoundCmd = new org.eclipse.gmf.runtime.common.core.command.CompositeCommand("Delete Clabject and Dependents");
		
		//************************************************
		// Delete link to remote model
		//************************************************
		org.eclipse.gmf.runtime.common.core.command.ICommand destroyRemoteLinkCommand = getDeleteRemoteLinkCommand(req);
		if(destroyRemoteLinkCommand != null)
			compoundCmd.add(destroyRemoteLinkCommand);
		
		«IF editHelperClassName.startsWith('Entity') or editHelperClassName.startsWith('Connection')»
		if(! (req.getElementToDestroy() instanceof org.melanee.core.models.plm.PLM.Clabject))
			return super.getDestroyElementCommand(req);
		
		//************************************************
		// Delete Inheritance, Connection, Classification
		//************************************************
		org.melanee.core.models.plm.PLM.Clabject destroyedClabject = (org.melanee.core.models.plm.PLM.Clabject)req.getElementToDestroy();
		
		java.util.List<org.melanee.core.models.plm.PLM.Classification>classificationsToDestroy = new java.util.ArrayList<org.melanee.core.models.plm.PLM.Classification>();
		classificationsToDestroy.addAll(destroyedClabject.getClassificationsAsInstance());
		classificationsToDestroy.addAll(destroyedClabject.getClassificationsAsType());
		
				
		//*****************************************************
		// Destroy the connections in case
		// that they are not having more than one other
		// participant
		//*****************************************************
		for (org.melanee.core.models.plm.PLM.Connection connectionToDestroy : destroyedClabject.getDefinedConnections()){
			
			if(connectionToDestroy.getConnectionEnd().size() > 2)
				continue;
			
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest dr = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(false);
			dr.setClientContext(req.getClientContext());
			dr.setEditingDomain(req.getEditingDomain());
			dr.setElementToDestroy(connectionToDestroy);
			dr.setLabel("Delete Connection");
			compoundCmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(dr));
			
			classificationsToDestroy.addAll(connectionToDestroy.getClassificationsAsInstance());
			classificationsToDestroy.addAll(connectionToDestroy.getClassificationsAsType());
		}
		
		//*****************************************************
		// Delete the classifications
		//*****************************************************
		for (org.melanee.core.models.plm.PLM.Classification classificationToDestroy : classificationsToDestroy) {
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest dr = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(false);
			dr.setClientContext(req.getClientContext());
			dr.setEditingDomain(req.getEditingDomain());
			dr.setElementToDestroy(classificationToDestroy);
			dr.setLabel("Delete Classification from "
					+ (classificationToDestroy.getInstance().getName() != null ? classificationToDestroy
							.getInstance().getName() : "")
					+ " to "
					+ (classificationToDestroy.getType().getName() != null ? classificationToDestroy
							.getType().getName() : ""));
			compoundCmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(dr));
		}
		
		//*****************************************************
		// Destroy the generalizations in case
		// that they are not having more than one other
		// participant
		//*****************************************************
		for (org.melanee.core.models.plm.PLM.Inheritance inheritanceToDestroy : destroyedClabject.getDefinedInheritances()){
			
			if((inheritanceToDestroy.getSubtype().size() + inheritanceToDestroy.getSupertype().size()) > 2)
				continue;
			
			org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest dr = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(false);
			dr.setClientContext(req.getClientContext());
			dr.setEditingDomain(req.getEditingDomain());
			dr.setElementToDestroy(inheritanceToDestroy);
			dr.setLabel("Delete inheritance");
			compoundCmd.add(new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(dr));
		}
		«ENDIF»
		
		//Delete the model element itself
		org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand cmd = new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(req);
		compoundCmd.add(cmd);
		
		return compoundCmd;
	}

	/**
	 * Delete the link to remote model element from the deleted model element
	 * 
	 * @param req The request used to delete the model element
	 * @return the command deleting the link or null if no link exists
	 * 
	 * @generated
	 */
	private org.eclipse.gmf.runtime.common.core.command.ICommand getDeleteRemoteLinkCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest req){
		
		//first check if linking model is present
		org.eclipse.emf.ecore.resource.Resource r = req.getElementToDestroy().eResource();
		if (r.getContents().size() < 3)
			return null;
		
		//Apply only to PLM elements
		if(! (req.getElementToDestroy() instanceof org.melanee.core.models.plm.PLM.Element) )
			return null;
		
		org.melanee.core.models.links.links.Link link = null;
		
		try {
			link = (org.melanee.core.models.links.links.Link) org.melanee.core.common.emf.ocl.OCLHelper.execute(req.getElementToDestroy(), "links::Link.allInstances()->select(target = self)->any(true)");
		} catch (org.eclipse.ocl.ParserException e) {
			e.printStackTrace();
		}

		if(link == null)
			return null;
		
		org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest dr = new org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest(false);
		dr.setClientContext(req.getClientContext());
		dr.setEditingDomain(req.getEditingDomain());
		dr.setElementToDestroy(link);
		dr.setLabel("Destroy Element Remote Model Link");
		org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand result = new org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand(dr);
		return result;
	}


«ENDAROUND»
