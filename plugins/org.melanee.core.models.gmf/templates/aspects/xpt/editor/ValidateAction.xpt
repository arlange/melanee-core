/*
 * Copyright (c) 2007, 2010 Borland Software Corporation and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::editor::Utils»
«EXTENSION xpt::GenAuditRoot»

«DEFINE validate FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void validate(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart,
			org.eclipse.gmf.runtime.notation.View view) {
		«IF editorGen.application = null-»
		org.eclipse.core.resources.IFile target = view.eResource() != null ?
				org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(view.eResource()) : null;
		if (target != null) {
			«getMarkerNavigationProviderQualifiedClassName()».deleteMarkers(target);
		}
		«ELSE-»
		org.eclipse.gmf.runtime.notation.View target = view;
		«EXPAND xpt::editor::ValidationMarker::qualifiedClassName».removeAllMarkers(diagramEditPart.getViewer());
		«ENDIF-»
		org.eclipse.emf.common.util.Diagnostic diagnostic = runEMFValidator(view);
		createMarkers(target, diagnostic, diagramEditPart);
		
		//********************************************
		// BEGIN RUN VALIDATION OF LINK MODEL
		//********************************************
		diagnostic = runLinkModelValidator(view);
		createMarkers(target, diagnostic, diagramEditPart);
		//********************************************
		// END RUN VALIDATION OF LINK MODEL
		//********************************************
		
		org.eclipse.emf.validation.service.IBatchValidator validator =
				(org.eclipse.emf.validation.service.IBatchValidator)
						org.eclipse.emf.validation.service.ModelValidationService.getInstance().newValidator(
								org.eclipse.emf.validation.model.EvaluationMode.BATCH);
		validator.setIncludeLiveConstraints(true);
		if (view.isSetElement() && view.getElement() != null) {
			org.eclipse.core.runtime.IStatus status = validator.validate(view.getElement());
			createMarkers(target, status, diagramEditPart);
		}
«IF shouldRunValidateOnDiagram(editorGen.audits)-»
«IF hasDiagramElementTargetRule(editorGen.audits)-»
		validator.setTraversalStrategy(«getValidationProviderQualifiedClassName()».getNotationTraversalStrategy(validator));
«ENDIF-»
		org.eclipse.core.runtime.IStatus status = validator.validate(view);
		createMarkers(target, status, diagramEditPart);
«ENDIF-»
		«IF editorGen.application <> null and validationDecorators-»
		«getValidationDecoratorProviderQualifiedClassName()».refreshDecorators(view);
		for (java.util.Iterator it = view.eAllContents(); it.hasNext();) {
			org.eclipse.emf.ecore.EObject next = (org.eclipse.emf.ecore.EObject) it.next();
			if (next instanceof org.eclipse.gmf.runtime.notation.View) {
				«getValidationDecoratorProviderQualifiedClassName()».refreshDecorators(
						(org.eclipse.gmf.runtime.notation.View) next);
			}
		}
		«ENDIF-»
	}
«ENDDEFINE»

«AROUND additions FOR gmfgen::GenDiagram»
	/**
	 * Validate the model which stores links to the 
	 * remote model
	 * 
	 * @param target the view of the diagramEditPart
	 * @return Evaluation results
	 */
	private static org.eclipse.emf.common.util.Diagnostic runLinkModelValidator(org.eclipse.gmf.runtime.notation.View target){
	
		//first check if linking model is present
		org.eclipse.emf.ecore.resource.Resource r = target.eResource();
		if (r.getContents().size() < 3)
			return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
		
		if (target.isSetElement() && target.getElement() != null) {
			
			org.eclipse.emf.ecore.EObject eObj = null;
			try {
				eObj = (org.eclipse.emf.ecore.EObject)org.melanee.core.common.emf.ocl.OCLHelper.execute(target, "links::LinkingModel.allInstances()->any(true)");
			} catch (org.eclipse.ocl.ParserException e) {
				e.printStackTrace();
			}	
			
			if (eObj == null)
				return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
				
			return new org.eclipse.emf.ecore.util.Diagnostician() {

				public String getObjectLabel(org.eclipse.emf.ecore.EObject eObject) {
					return org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(eObject, true);
				}
			}.validate(eObj);
		}
		
		return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
	}
«ENDAROUND»